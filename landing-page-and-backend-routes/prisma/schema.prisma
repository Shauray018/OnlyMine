// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_Si8k7AeYcLoK@ep-floral-pond-ahz4v8bw-pooler.c-3.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  username      String   @unique
  displayName   String?
  bio           String?
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  posts         Post[]
  likes         Like[]
  followers     Follow[] @relation("Following")
  following     Follow[] @relation("Followers")
  
  @@index([walletAddress])
  @@index([username])
}

model Post {
  id            String   @id @default(cuid())
  userId        String
  imageUrl      String
  thumbnailUrl  String?
  caption       String?
  location      String?
  aspectRatio   Float?   @default(1.0)
  
  // Engagement metrics
  likesCount    Int      @default(0)
  commentsCount Int      @default(0)
  sharesCount   Int      @default(0)
  
  // Trending score (calculated periodically)
  trendingScore Float    @default(0)
  
  // NFT metadata
  isMinted      Boolean  @default(false)
  mintAddress   String?  @unique
  mintedAt      DateTime?
  weeklyRank    Int?
  weekNumber    Int?     // Year + week number (e.g., 202443)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         Like[]
  comments      Comment[]
  
  @@index([userId])
  @@index([createdAt])
  @@index([trendingScore])
  @@index([weekNumber, weeklyRank])
  @@index([isMinted])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model WeeklySelection {
  id           String   @id @default(cuid())
  weekNumber   Int      @unique // e.g., 202443
  startDate    DateTime
  endDate      DateTime
  selectedAt   DateTime @default(now())
  
  postIds      String[] // Top 10 post IDs
  collectionAddress String?
  
  @@index([weekNumber])
}